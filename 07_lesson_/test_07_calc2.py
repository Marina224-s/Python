import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

class CalculatorPage:
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, 60)
        
        # –õ–æ–∫–∞—Ç–æ—Ä—ã
        self.delay_input = (By.ID, "delay")
        self.result_display = (By.CLASS_NAME, "screen")
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫
        self.buttons = {
            "0": (By.XPATH, "//span[text()='0']"),
            "1": (By.XPATH, "//span[text()='1']"),
            "2": (By.XPATH, "//span[text()='2']"),
            "3": (By.XPATH, "//span[text()='3']"),
            "4": (By.XPATH, "//span[text()='4']"),
            "5": (By.XPATH, "//span[text()='5']"),
            "6": (By.XPATH, "//span[text()='6']"),
            "7": (By.XPATH, "//span[text()='7']"),
            "8": (By.XPATH, "//span[text()='8']"),
            "9": (By.XPATH, "//span[text()='9']"),
            "+": (By.XPATH, "//span[text()='+']"),
            "-": (By.XPATH, "//span[text()='-']"),
            "*": (By.XPATH, "//span[text()='√ó']"),
            "/": (By.XPATH, "//span[text()='√∑']"),
            "=": (By.XPATH, "//span[text()='=']"),
            "C": (By.XPATH, "//span[text()='C']")
        }

    def open(self):
        self.driver.get("https://bonigarcia.dev/selenium-webdriver-java/slow-calculator.html")
        self.wait.until(EC.presence_of_element_located(self.delay_input))
        print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        return self

    def set_delay(self, delay_value):
        delay_field = self.wait.until(EC.visibility_of_element_located(self.delay_input))
        delay_field.clear()
        delay_field.send_keys(str(delay_value))
        print(f"–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {delay_value} —Å–µ–∫—É–Ω–¥")
        return self

    def press_button(self, button_text):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–Ω–∞ –Ω–∞–∂–∞–ª–∞—Å—å"""
        if button_text not in self.buttons:
            raise ValueError(f"–ö–Ω–æ–ø–∫–∞ '{button_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        button_locator = self.buttons[button_text]
        button = self.wait.until(EC.element_to_be_clickable(button_locator))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–∏—Å–ø–ª–µ—è –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º
        current_display = self.get_display_text()
        
        button.click()
        print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: '{button_text}'")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Å–ø–ª–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è (–¥–ª—è —Ü–∏—Ñ—Ä –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)
        if button_text in "0123456789+-*/":
            new_display = self.get_display_text()
            if new_display == current_display:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¥–∏—Å–ø–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '{button_text}'")
        
        return self

    def get_display_text(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –¥–∏—Å–ø–ª–µ–µ"""
        try:
            display = self.driver.find_element(*self.result_display)
            return display.text.strip()
        except:
            return ""

    def wait_for_calculation_result(self, timeout=50):
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç wait_for_result —Ç–µ–º, —á—Ç–æ –∂–¥–µ—Ç –∏–º–µ–Ω–Ω–æ –†–ï–ó–£–õ–¨–¢–ê–¢ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è,
        –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–∏—Å–ø–ª–µ–µ
        """
        print(f"–û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫—É–Ω–¥)...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                display_text = self.get_display_text()
                print(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–∏—Å–ø–ª–µ—è: '{display_text}'")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–∏–º–≤–æ–ª –æ–∂–∏–¥–∞–Ω–∏—è ‚è≥
                if not display_text or display_text == "‚è≥":
                    time.sleep(1)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –†–ï–ó–£–õ–¨–¢–ê–¢ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –∞ –Ω–µ –≤–≤–æ–¥
                # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
                if (display_text.replace('.', '').replace('-', '').isdigit() and 
                    display_text != "7+8" and  # –∏—Å–∫–ª—é—á–∞–µ–º –≤–≤–æ–¥
                    len(display_text) > 0):
                    
                    print(f"–ù–∞–π–¥–µ–Ω —á–∏—Å–ª–æ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{display_text}'")
                    return display_text
                
                # –ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ –µ—â–µ –≤–≤–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7+8"), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                time.sleep(1)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏—Å–ø–ª–µ—è: {e}")
                time.sleep(1)
        
        # –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
        final_text = self.get_display_text()
        print(f"–¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: '{final_text}'")
        self.driver.save_screenshot("calculation_timeout.png")
        raise TimeoutError(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")

    def perform_calculation(self, expression, expected_delay=45):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ: {expression}")
        
        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for char in expression:
            self.press_button(char)
        
        # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "=" –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        if expression.endswith("="):
            result = self.wait_for_calculation_result(timeout=expected_delay + 10)
            return result
        
        return self.get_display_text()

class TestSlowCalculator(unittest.TestCase):
    def setUp(self):
        self.driver = webdriver.Chrome()
        self.driver.maximize_window()
        self.calculator = CalculatorPage(self.driver)

    def test_7_plus_8_equals_15_with_45s_delay(self):
        """–¢–µ—Å—Ç: 7 + 8 = 15 —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 45 —Å–µ–∫—É–Ω–¥"""
        print("=" * 50)
        print("–¢–ï–°–¢: 7 + 8 = 15 —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 45 —Å–µ–∫—É–Ω–¥")
        print("=" * 50)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        self.calculator.open()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        self.calculator.set_delay(45)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = self.calculator.perform_calculation("7+8=", expected_delay=45)
        
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertEqual(result, "15", f"–û–∂–∏–¥–∞–ª–æ—Å—å '15', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ '{result}'")
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    def test_quick_debug_2_plus_3(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: 2 + 3 = 5"""
        print("=" * 50)
        print("–ë–´–°–¢–†–´–ô –¢–ï–°–¢: 2 + 3 = 5")
        print("=" * 50)
        
        self.calculator.open()
        self.calculator.set_delay(3)  # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        result = self.calculator.perform_calculation("2+3=", expected_delay=3)
        
        self.assertEqual(result, "5", f"–û–∂–∏–¥–∞–ª–æ—Å—å '5', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ '{result}'")
        print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!")

    def tearDown(self):
        self.driver.quit()
        print("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        print("=" * 50)

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏–º –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π suite
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    suite.addTest(TestSlowCalculator('test_quick_debug_2_plus_3'))
    suite.addTest(TestSlowCalculator('test_7_plus_8_equals_15_with_45s_delay'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    if result.wasSuccessful():
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")